Index: liblo-0.28rc/lo/lo_cpp.h
===================================================================
--- liblo-0.28rc.orig/lo/lo_cpp.h	2013-11-21 09:01:04.000000000 -0800
+++ liblo-0.28rc/lo/lo_cpp.h	2013-12-16 20:39:15.198147482 -0800
@@ -366,17 +366,26 @@
 
     class Server
     {
+	void init(lo_server s)
+	{
+            server = s;
+        }
+
       public:
-        Server(lo_server s) : server(s) {}
+        Server(lo_server s)
+        {
+            init(s);
+        }
 
         template <typename E>
         Server(const num_string_type &port, E&& e)
-            : Server(lo_server_new(port,
+        {
+            init(lo_server_new(port,
               [](int num, const char *msg, const char *where){
                 auto h = static_cast<handler_error*>(lo_error_get_context());
                 (*h)(num, msg, where);
-              }))
-        {
+              }));
+
             if (server) {
                 lo_server_set_error_context(server,
 					    (_error_handler = std::unique_ptr<handler>(
@@ -386,12 +395,13 @@
 
         template <typename E>
         Server(const num_string_type &port, int proto, E&& e=0)
-            : Server(lo_server_new_with_proto(port, proto,
+        {
+            init(lo_server_new_with_proto(port, proto,
               [](int num, const char *msg, const char *where){
                 auto h = static_cast<handler_error*>(lo_error_get_context());
                 (*h)(num, msg, where);
-              }))
-        {
+              }));
+
             if (server) {
                 lo_server_set_error_context(server,
 					    (_error_handler = std::unique_ptr<handler>(
@@ -402,7 +412,8 @@
         template <typename E>
         Server(const string_type &group, const num_string_type &port,
                const string_type &iface=0, const string_type &ip=0, E&& e=0)
-            : Server((!iface._s || !ip._s)
+        {
+            init((!iface._s || !ip._s)
                      ? lo_server_new_multicast_iface(group, port, iface, ip,
                            [](int num, const char *msg, const char *where){
                                auto h = static_cast<handler_error*>(lo_error_get_context());
@@ -412,8 +423,8 @@
                            [](int num, const char *msg, const char *where){
                                auto h = static_cast<handler_error*>(lo_error_get_context());
                                (*h)(num, msg, where);
-                       }))
-        {
+                       }));
+
             if (server) {
                 lo_server_set_error_context(server,
 					    (_error_handler = std::unique_ptr<handler>(
@@ -422,18 +433,24 @@
         }
 
         Server(const num_string_type &port, lo_err_handler err_h=0)
-            : Server(lo_server_new(port, err_h)) {}
+        {
+            init(lo_server_new(port, err_h));
+        }
 
         Server(const num_string_type &port, int proto, lo_err_handler err_h=0)
-            : Server(lo_server_new_with_proto(port, proto, err_h)) {}
+        {
+            init(lo_server_new_with_proto(port, proto, err_h));
+        }
 
         Server(const string_type &group, const num_string_type &port,
                const string_type &iface="", const string_type &ip="", lo_err_handler err_h=0)
-            : Server((iface._s || ip._s)
+        {
+            init((iface._s || ip._s)
                      ? lo_server_new_multicast_iface(group, port,
                                                      iface._s?:0,
                                                      ip._s?:0, err_h)
-                     : lo_server_new_multicast(group, port, err_h)) {}
+                     : lo_server_new_multicast(group, port, err_h));
+        }
 
         virtual ~Server()
             { if (server) lo_server_free(server); }
@@ -713,7 +730,7 @@
         }
 
         Bundle(const Bundle &b)
-            : Bundle((lo_bundle)b) {}
+            : bundle(b) { if (b) { lo_bundle_incref(b); } }
 
         ~Bundle()
             { if (bundle) lo_bundle_free_recursive(bundle); }
